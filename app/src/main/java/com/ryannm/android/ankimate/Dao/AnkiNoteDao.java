package com.ryannm.android.ankimate.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ANKI_NOTE".
*/
public class AnkiNoteDao extends AbstractDao<AnkiNote, Long> {

    public static final String TABLENAME = "ANKI_NOTE";

    /**
     * Properties of entity AnkiNote.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ConfigurationId = new Property(1, Long.class, "configurationId", false, "CONFIGURATION_ID");
        public final static Property Fields = new Property(2, String.class, "fields", false, "FIELDS");
        public final static Property DeckId = new Property(3, Long.class, "deckId", false, "DECK_ID");
        public final static Property Tags = new Property(4, String.class, "tags", false, "TAGS");
        public final static Property NotebookTitle = new Property(5, String.class, "notebookTitle", false, "NOTEBOOK_TITLE");
        public final static Property NoteTitle = new Property(6, String.class, "noteTitle", false, "NOTE_TITLE");
    };


    public AnkiNoteDao(DaoConfig config) {
        super(config);
    }
    
    public AnkiNoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ANKI_NOTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CONFIGURATION_ID\" INTEGER," + // 1: configurationId
                "\"FIELDS\" TEXT," + // 2: fields
                "\"DECK_ID\" INTEGER," + // 3: deckId
                "\"TAGS\" TEXT," + // 4: tags
                "\"NOTEBOOK_TITLE\" TEXT," + // 5: notebookTitle
                "\"NOTE_TITLE\" TEXT);"); // 6: noteTitle
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANKI_NOTE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AnkiNote entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long configurationId = entity.getConfigurationId();
        if (configurationId != null) {
            stmt.bindLong(2, configurationId);
        }
 
        String fields = entity.getFields();
        if (fields != null) {
            stmt.bindString(3, fields);
        }
 
        Long deckId = entity.getDeckId();
        if (deckId != null) {
            stmt.bindLong(4, deckId);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(5, tags);
        }
 
        String notebookTitle = entity.getNotebookTitle();
        if (notebookTitle != null) {
            stmt.bindString(6, notebookTitle);
        }
 
        String noteTitle = entity.getNoteTitle();
        if (noteTitle != null) {
            stmt.bindString(7, noteTitle);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AnkiNote readEntity(Cursor cursor, int offset) {
        AnkiNote entity = new AnkiNote( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // configurationId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fields
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // deckId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tags
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // notebookTitle
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // noteTitle
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AnkiNote entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setConfigurationId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFields(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeckId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setTags(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNotebookTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNoteTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AnkiNote entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AnkiNote entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
