package com.ryannm.android.ankimate.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BLACK_LIST".
*/
public class BlackListDao extends AbstractDao<BlackList, String> {

    public static final String TABLENAME = "BLACK_LIST";

    /**
     * Properties of entity BlackList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property NoteTitle = new Property(1, String.class, "noteTitle", false, "NOTE_TITLE");
        public final static Property CardsAdded = new Property(2, Integer.class, "cardsAdded", false, "CARDS_ADDED");
        public final static Property Notebook = new Property(3, String.class, "notebook", false, "NOTEBOOK");
    };


    public BlackListDao(DaoConfig config) {
        super(config);
    }
    
    public BlackListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BLACK_LIST\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NOTE_TITLE\" TEXT," + // 1: noteTitle
                "\"CARDS_ADDED\" INTEGER," + // 2: cardsAdded
                "\"NOTEBOOK\" TEXT);"); // 3: notebook
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BLACK_LIST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BlackList entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String noteTitle = entity.getNoteTitle();
        if (noteTitle != null) {
            stmt.bindString(2, noteTitle);
        }
 
        Integer cardsAdded = entity.getCardsAdded();
        if (cardsAdded != null) {
            stmt.bindLong(3, cardsAdded);
        }
 
        String notebook = entity.getNotebook();
        if (notebook != null) {
            stmt.bindString(4, notebook);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BlackList readEntity(Cursor cursor, int offset) {
        BlackList entity = new BlackList( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // noteTitle
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // cardsAdded
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // notebook
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BlackList entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNoteTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCardsAdded(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setNotebook(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(BlackList entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(BlackList entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
