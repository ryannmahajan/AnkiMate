package com.ryannm.android.ankimate.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONFIGURATION".
*/
public class ConfigurationDao extends AbstractDao<Configuration, Long> {

    public static final String TABLENAME = "CONFIGURATION";

    /**
     * Properties of entity Configuration.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property TagsToFetch = new Property(2, String.class, "tagsToFetch", false, "TAGS_TO_FETCH");
        public final static Property TagsToSave = new Property(3, String.class, "tagsToSave", false, "TAGS_TO_SAVE");
        public final static Property ModelId = new Property(4, Long.class, "modelId", false, "MODEL_ID");
        public final static Property DeckId = new Property(5, Long.class, "deckId", false, "DECK_ID");
        public final static Property Fields = new Property(6, String.class, "fields", false, "FIELDS");
        public final static Property FieldKeywords = new Property(7, String.class, "fieldKeywords", false, "FIELD_KEYWORDS");
    };


    public ConfigurationDao(DaoConfig config) {
        super(config);
    }
    
    public ConfigurationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONFIGURATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"TAGS_TO_FETCH\" TEXT," + // 2: tagsToFetch
                "\"TAGS_TO_SAVE\" TEXT," + // 3: tagsToSave
                "\"MODEL_ID\" INTEGER," + // 4: modelId
                "\"DECK_ID\" INTEGER," + // 5: deckId
                "\"FIELDS\" TEXT," + // 6: fields
                "\"FIELD_KEYWORDS\" TEXT);"); // 7: fieldKeywords
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONFIGURATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Configuration entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String tagsToFetch = entity.getTagsToFetch();
        if (tagsToFetch != null) {
            stmt.bindString(3, tagsToFetch);
        }
 
        String tagsToSave = entity.getTagsToSave();
        if (tagsToSave != null) {
            stmt.bindString(4, tagsToSave);
        }
 
        Long modelId = entity.getModelId();
        if (modelId != null) {
            stmt.bindLong(5, modelId);
        }
 
        Long deckId = entity.getDeckId();
        if (deckId != null) {
            stmt.bindLong(6, deckId);
        }
 
        String fields = entity.getFields();
        if (fields != null) {
            stmt.bindString(7, fields);
        }
 
        String fieldKeywords = entity.getFieldKeywords();
        if (fieldKeywords != null) {
            stmt.bindString(8, fieldKeywords);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Configuration readEntity(Cursor cursor, int offset) {
        Configuration entity = new Configuration( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tagsToFetch
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tagsToSave
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // modelId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // deckId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fields
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // fieldKeywords
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Configuration entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTagsToFetch(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTagsToSave(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setModelId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setDeckId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setFields(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFieldKeywords(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Configuration entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Configuration entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
